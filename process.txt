# Complete Setup Process for Placement Management System

## üìã Overview
This guide will help you set up MongoDB Atlas (cloud database) and complete the dynamic data integration for your Placement Management System.

## üóÇÔ∏è Current Status
‚úÖ Backend API server created and running
‚úÖ Frontend dynamic integration completed
‚úÖ Database schemas and services implemented
‚úÖ API client configured
‚ö†Ô∏è Database connection needed (following steps below)

## üìä Step 1: MongoDB Atlas Setup (Cloud Database - Recommended)

### 1.1 Create MongoDB Atlas Account
1. Go to: https://www.mongodb.com/atlas
2. Click "Try Free" or "Sign Up"
3. Create account with your email
4. Verify email address

### 1.2 Create a New Cluster
1. After login, click "Create" ‚Üí "Database"
2. Choose "M0 Sandbox" (Free tier)
3. Select "AWS" as cloud provider
4. Choose region closest to you (e.g., "ap-south-1" for India)
5. Cluster Name: "placement-cluster"
6. Click "Create Cluster" (takes 1-3 minutes)

### 1.3 Configure Database Access
1. Go to "Database Access" in left sidebar
2. Click "Add New Database User"
3. Authentication Method: "Password"
4. Username: `placementuser`
5. Password: Click "Autogenerate Secure Password" (COPY THIS PASSWORD!)
6. Built-in Role: "Read and write to any database"
7. Click "Add User"

### 1.4 Configure Network Access
1. Go to "Network Access" in left sidebar
2. Click "Add IP Address"
3. Select "Allow Access from Anywhere" (for development)
4. Confirm: `0.0.0.0/0`
5. Click "Confirm"

### 1.5 Get Connection String
1. Go to "Database" in left sidebar
2. Click "Connect" on your cluster
3. Select "Connect your application"
4. Driver: "Node.js", Version: "5.5 or later"
5. Copy the connection string (looks like):
   ```
   mongodb+srv://placementuser:<password>@placement-cluster.xxxxx.mongodb.net/?retryWrites=true&w=majority&appName=placement-cluster
   ```
6. Replace `<password>` with the password you copied in step 1.3

## üîß Step 2: Update Environment Configuration

### 2.1 Update API Environment File
Update the file: `apps/api/.env`
Replace the MONGODB_URI with your Atlas connection string:

```env
# Database - Replace with your Atlas connection string
MONGODB_URI=mongodb+srv://placementuser:YOUR_PASSWORD@placement-cluster.xxxxx.mongodb.net/placement_management?retryWrites=true&w=majority

# External API Keys (Optional - for external job sync)
ADZUNA_APP_ID=your_adzuna_app_id
ADZUNA_APP_KEY=your_adzuna_app_key
RAPIDAPI_KEY=your_rapidapi_key

# Server Configuration
PORT=3000
NODE_ENV=development

# Authentication
JWT_SECRET=your-jwt-secret-key-here
```

### 2.2 Verify Web Environment File
Check that `apps/web/.env.local` contains:
```env
VITE_API_URL=http://localhost:3000
```

## üöÄ Step 3: Start the System

### 3.1 Start Development Servers
Open terminal in project root and run:
```bash
npm run dev
```

This will start:
- API Server: http://localhost:3000
- Web App: http://localhost:3001

### 3.2 Verify API Connection
1. Wait for servers to start (should see "‚úì Ready" messages)
2. Test API health: http://localhost:3000/health
3. Should see: `{"status":"ok","timestamp":"...","message":"Placement Management API is running"}`

### 3.3 Test Database Connection
1. Check terminal logs for "MongoDB connected" message
2. If you see connection errors, verify:
   - MongoDB URI is correct
   - Password is correct (no special characters issues)
   - IP address is whitelisted (0.0.0.0/0)
   - Internet connection is working

## üìù Step 4: Seed Initial Data (Optional)

### 4.1 Run Database Seeding
```bash
cd apps/api
npm run seed
```

This will populate your database with:
- Sample on-campus job opportunities
- Example external job listings
- Test application records

### 4.2 Verify Data Population
1. Go to MongoDB Atlas Dashboard
2. Click "Browse Collections" on your cluster
3. You should see:
   - `jobs` collection with sample jobs
   - `applications` collection (initially empty)
   - `userprofiles` collection (populated as users sign up)

## üåê Step 5: Test Dynamic System

### 5.1 Test Jobs Page
1. Go to: http://localhost:3001
2. Navigate to Jobs page
3. Click "Refresh" button
4. Should see jobs loaded from database (not fallback data)
5. Apply to a job ‚Üí should save to database

### 5.2 Test Applications Page
1. Navigate to Applications page
2. Should show your applied jobs
3. Status tracking should work
4. Try withdrawing an application

### 5.3 Verify Real-time Updates
1. Apply to a job from Jobs page
2. Navigate to Applications page
3. Should see the new application immediately
4. Check MongoDB Atlas collections to verify data persistence

## üîë Step 6: External Job APIs (Optional Enhancement)

### 6.1 Adzuna API Setup
1. Go to: https://developer.adzuna.com/
2. Sign up for free account
3. Create an application
4. Get App ID and App Key
5. Add to `apps/api/.env`:
   ```
   ADZUNA_APP_ID=your_app_id
   ADZUNA_APP_KEY=your_app_key
   ```

### 6.2 RapidAPI Setup
1. Go to: https://rapidapi.com/
2. Sign up for free account
3. Subscribe to a jobs API (many free tiers available)
4. Get API key from dashboard
5. Add to `apps/api/.env`:
   ```
   RAPIDAPI_KEY=your_rapidapi_key
   ```

### 6.3 Test External Job Sync
```bash
# In apps/api directory
curl -X POST http://localhost:3000/jobs/sync-external
```

## üêõ Troubleshooting

### Common Issues:

1. **MongoDB Connection Failed**
   - Check connection string format
   - Verify password (replace <password> placeholder)
   - Ensure IP 0.0.0.0/0 is whitelisted
   - Check internet connection

2. **API Server Won't Start**
   - Check if port 3000 is available
   - Verify all dependencies installed: `npm install`
   - Check .env file format (no extra spaces)

3. **Frontend Can't Connect to API**
   - Verify VITE_API_URL in .env.local
   - Check if API server is running on port 3000
   - Check browser console for CORS errors

4. **Jobs/Applications Not Loading**
   - Check browser developer tools ‚Üí Network tab
   - Look for failed API calls
   - Verify authentication (Clerk) is working
   - Check if fallback data is showing (indicates API issue)

## ‚úÖ Success Checklist

- [ ] MongoDB Atlas cluster created and running
- [ ] Database user created with read/write permissions
- [ ] Network access configured (0.0.0.0/0)
- [ ] Connection string updated in apps/api/.env
- [ ] Development servers starting without errors
- [ ] API health endpoint responding
- [ ] MongoDB connection successful (check logs)
- [ ] Jobs page loading dynamic data
- [ ] Job applications saving to database
- [ ] Applications page showing real data
- [ ] External APIs configured (optional)

## üéØ Final Result

After completing these steps, you will have:
- ‚úÖ Fully dynamic job listings from database
- ‚úÖ Real-time application tracking
- ‚úÖ Persistent data storage in MongoDB
- ‚úÖ External job sync capabilities
- ‚úÖ Complete replacement of static demo data

## üìû Support

If you encounter issues:
1. Check the troubleshooting section above
2. Verify each step was completed correctly
3. Check terminal logs for specific error messages
4. Ensure all environment variables are set correctly

---

**Time to Complete:** ~15-30 minutes
**Difficulty Level:** Beginner to Intermediate
**Cost:** Free (using MongoDB Atlas free tier)
