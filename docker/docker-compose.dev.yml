version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: placement_postgres
    environment:
      POSTGRES_DB: placement_db
      POSTGRES_USER: placement_user
      POSTGRES_PASSWORD: placement_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U placement_user -d placement_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: placement_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: placement_minio
    environment:
      MINIO_ROOT_USER: minio_access_key
      MINIO_ROOT_PASSWORD: minio_secret_key
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: placement_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: placement_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Jaeger for tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: placement_jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # ClamAV for virus scanning
  clamav:
    image: clamav/clamav:latest
    container_name: placement_clamav
    ports:
      - "3310:3310"
    volumes:
      - clamav_data:/var/lib/clamav

  # API Application
  api:
    build:
      context: ../../
      dockerfile: docker/Dockerfile.api
    container_name: placement_api
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://placement_user:placement_pass@postgres:5432/placement_db?schema=public
      - REDIS_URL=redis://redis:6379
      - S3_ENDPOINT=http://minio:9000
    ports:
      - "3001:3001"
    volumes:
      - ../../apps/api:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  # Web Application
  web:
    build:
      context: ../../
      dockerfile: docker/Dockerfile.web
    container_name: placement_web
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ../../apps/web:/app
      - /app/node_modules
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
  clamav_data:
