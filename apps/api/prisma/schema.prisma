// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  STUDENT
  COORDINATOR
  ADMIN
}

enum ApplicationStatus {
  APPLIED
  SHORTLISTED
  TEST_SCHEDULED
  TEST_COMPLETED
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  SELECTED
  REJECTED
  WITHDRAWN
}

enum DriveStatus {
  DRAFT
  PUBLISHED
  APPLICATIONS_OPEN
  APPLICATIONS_CLOSED
  COMPLETED
  CANCELLED
}

enum NotificationType {
  DRIVE_PUBLISHED
  APPLICATION_STATUS_CHANGED
  INTERVIEW_SCHEDULED
  DEADLINE_REMINDER
  POINTS_EARNED
  BADGE_EARNED
  NEWS_ITEM
  HACKATHON_REMINDER
  GENERAL_ANNOUNCEMENT
}

enum GamificationEventType {
  PROFILE_COMPLETED
  FIRST_APPLICATION
  MOCK_TEST_COMPLETED
  INTERVIEW_EXPERIENCE_SHARED
  CERTIFICATE_UPLOADED
  RESUME_GENERATED
  AI_OPTIMIZATION_USED
}

enum InterviewExperienceStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// Core Models
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String?
  role        UserRole
  name        String
  phone       String
  avatarUrl   String?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // OAuth fields
  googleId    String? @unique
  
  // Relationships
  student             Student?
  createdDrives       Drive[]
  applications        Application[]
  interviewExperiences InterviewExperience[]
  certificates        Certificate[]
  resumes             Resume[]
  notifications       Notification[]
  gamificationEvents  GamificationEvent[]
  userBadges          UserBadge[]
  auditLogs           AuditLog[]
  newsBookmarks       NewsBookmark[]
  hackathonBookmarks  HackathonBookmark[]
  hackathonReminders  HackathonReminder[]

  @@map("users")
}

model Student {
  id             String @id @default(cuid())
  userId         String @unique
  rollNo         String @unique
  branch         String
  graduationYear Int
  cgpa           Float
  backlogCount   Int    @default(0)
  skills         String[]
  links          Json   @default("{}")

  // Relationships
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  semesterRecords SemesterRecord[]
  eligibilityResults EligibilityResult[]

  @@map("students")
}

model SemesterRecord {
  id        String @id @default(cuid())
  studentId String
  semNumber Int
  sgpa      Float
  marks     Json   @default("{}")
  backlogs  Json   @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, semNumber])
  @@map("semester_records")
}

model Certificate {
  id        String   @id @default(cuid())
  studentId String
  title     String
  org       String
  issuedOn  DateTime
  fileUrl   String
  tags      String[] @default([])
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

model Resume {
  id                  String   @id @default(cuid())
  studentId           String
  title               String
  template            String   @default("default")
  fileUrl             String?
  generatedFromProfile Boolean @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  student      User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("resumes")
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  website   String?
  logoUrl   String?
  sectors   String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  drives               Drive[]
  interviewExperiences InterviewExperience[]

  @@map("companies")
}

model Drive {
  id          String      @id @default(cuid())
  companyId   String
  role        String
  description String
  location    String
  ctc         String
  startAt     DateTime
  endAt       DateTime
  testAt      DateTime?
  interviewAt DateTime?
  attachments String[]    @default([])
  eligibility Json        // Eligibility criteria as JSON
  status      DriveStatus @default(DRAFT)
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  company            Company             @relation(fields: [companyId], references: [id])
  creator            User                @relation(fields: [createdBy], references: [id])
  applications       Application[]
  eligibilityResults EligibilityResult[]

  @@map("drives")
}

model EligibilityResult {
  id        String   @id @default(cuid())
  driveId   String
  studentId String
  eligible  Boolean
  reasons   String[] @default([])
  computedAt DateTime @default(now())

  // Relationships
  drive   Drive   @relation(fields: [driveId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([driveId, studentId])
  @@map("eligibility_results")
}

model Application {
  id        String            @id @default(cuid())
  driveId   String
  studentId String
  resumeId  String
  status    ApplicationStatus @default(APPLIED)
  stage     String?
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relationships
  drive   Drive  @relation(fields: [driveId], references: [id])
  student User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  resume  Resume @relation(fields: [resumeId], references: [id])

  @@unique([driveId, studentId])
  @@map("applications")
}

model InterviewExperience {
  id         String                    @id @default(cuid())
  companyId  String
  role       String
  authorId   String
  content    String
  rounds     Json                      @default("[]") // Array of interview rounds
  difficulty Difficulty
  tags       String[]                  @default([])
  status     InterviewExperienceStatus @default(PENDING)
  upvotes    Int                       @default(0)
  downvotes  Int                       @default(0)
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt

  // Relationships
  company Company @relation(fields: [companyId], references: [id])
  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  votes   InterviewExperienceVote[]

  @@map("interview_experiences")
}

model InterviewExperienceVote {
  id          String @id @default(cuid())
  userId      String
  experienceId String
  isUpvote    Boolean
  createdAt   DateTime @default(now())

  // Relationships
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  experience InterviewExperience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@unique([userId, experienceId])
  @@map("interview_experience_votes")
}

model NewsItem {
  id          String   @id @default(cuid())
  source      String
  title       String
  url         String
  content     String?
  imageUrl    String?
  tags        String[] @default([])
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  bookmarks NewsBookmark[]

  @@index([publishedAt])
  @@index([tags])
  @@map("news_items")
}

model NewsBookmark {
  id       String   @id @default(cuid())
  userId   String
  newsId   String
  createdAt DateTime @default(now())

  // Relationships
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  news NewsItem @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@unique([userId, newsId])
  @@map("news_bookmarks")
}

model Hackathon {
  id          String   @id @default(cuid())
  source      String
  title       String
  url         String
  description String?
  prize       String?
  deadline    DateTime
  tags        String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  bookmarks HackathonBookmark[]
  reminders HackathonReminder[]

  @@index([deadline])
  @@index([tags])
  @@map("hackathons")
}

model HackathonBookmark {
  id          String   @id @default(cuid())
  userId      String
  hackathonId String
  createdAt   DateTime @default(now())

  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hackathon Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)

  @@unique([userId, hackathonId])
  @@map("hackathon_bookmarks")
}

model HackathonReminder {
  id          String   @id @default(cuid())
  userId      String
  hackathonId String
  reminderAt  DateTime
  sent        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hackathon Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)

  @@unique([userId, hackathonId])
  @@map("hackathon_reminders")
}

model GamificationEvent {
  id        String                @id @default(cuid())
  userId    String
  type      GamificationEventType
  points    Int
  meta      Json                  @default("{}")
  createdAt DateTime              @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("gamification_events")
}

model Badge {
  id              String @id @default(cuid())
  code            String @unique
  name            String
  description     String
  icon            String
  pointsThreshold Int
  createdAt       DateTime @default(now())

  // Relationships
  userBadges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  awardedAt DateTime @default(now())

  // Relationships
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  payload   Json             @default("{}")
  readAt    DateTime?
  createdAt DateTime         @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, readAt])
  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String
  entity    String
  entityId  String
  meta      Json     @default("{}")
  createdAt DateTime @default(now())

  // Relationships
  actor User @relation(fields: [actorId], references: [id])

  @@index([actorId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

// Search and Analytics views (these would be implemented as database views)
// Full-text search indexes
model SearchIndex {
  id       String @id @default(cuid())
  entity   String // 'student', 'drive', 'experience', etc.
  entityId String
  content  String // Full-text searchable content
  metadata Json   @default("{}")

  @@index([entity])
  @@map("search_indexes")
}

// System configuration
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}
